{"version":3,"sources":["components/Searchbar/Searchbar.js","components/Loader/Loader.js","components/ImageGallery/ImageGalleryItem.js","components/Modal/Modal.js","components/Button/Button.js","services/images-api.js","components/ImageGallery/ImageGallery.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","imageKeyword","setImageKeyword","className","event","preventDefault","trim","toast","warn","type","value","onChange","currentTarget","toLowerCase","name","autoComplete","autoFocus","placeholder","Loader","color","height","width","timeout","display","ImageGalleryItem","images","onClick","map","image","largeImageURL","tags","src","webformatURL","alt","id","modalRoot","document","querySelector","Modal","onClose","modalImg","modalAlt","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","target","Button","api","fetchImages","url","keyword","page","api_key","per_page","fetch","then","res","ok","json","Promise","reject","Error","URL","API_KEY","Status","ImageGallery","startPage","setImages","error","setError","status","setStatus","showModal","setShowModal","loading","setLoading","setPage","scrollWindow","scrollTo","top","documentElement","scrollHeight","behavior","imagesAPI","hits","catch","finally","toggleModal","renderButton","length","App","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ed84eef.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types';\r\nimport './Searchbar.css';\r\n\r\nfunction Searchbar({ onSubmit }) {\r\n  const [imageKeyword, setImageKeyword] = useState('');\r\n\r\n  const handleTagChange = event => {\r\n    setImageKeyword(event.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (imageKeyword.trim() === '') {\r\n      toast.warn('Введите ключевое слово в строку поиска');\r\n      return;\r\n    }\r\n    onSubmit(imageKeyword);\r\n    setImageKeyword('');\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form onSubmit={handleSubmit} className=\"SearchForm\">\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          value={imageKeyword}\r\n          onChange={handleTagChange}\r\n          name=\"imageKeyword\"\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\nimport LoaderDots from 'react-loader-spinner';\r\nimport './Loader.css';\r\n\r\nfunction Loader() {\r\n  return (\r\n    <>\r\n      <LoaderDots\r\n        type=\"ThreeDots\"\r\n        color=\"#3ebb2e\"\r\n        height={50}\r\n        width={50}\r\n        timeout={0}\r\n        display=\"block\"\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ImageGalleryItem.css';\r\n\r\nfunction ImageGalleryItem({ images, onClick }) {\r\n  return (\r\n    <>\r\n      {images.map(image => (\r\n        <li\r\n          key={image.id}\r\n          onClick={() => onClick(image.largeImageURL, image.tags)}\r\n          className=\"ImageGalleryItem\"\r\n        >\r\n          <img\r\n            src={image.webformatURL}\r\n            alt={image.tags}\r\n            className=\"ImageGalleryItem-image\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      webformatURL: PropTypes.string.isRequired,\r\n      largeImageURL: PropTypes.string.isRequired,\r\n      tags: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nfunction Modal({ onClose, modalImg, modalAlt }) {\r\n  useEffect(() => {\r\n    const handleKeyDown = e => {\r\n      if (e.code === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [onClose]);\r\n\r\n  const handleBackdropClick = e => {\r\n    if (e.currentTarget === e.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n      <div className=\"Modal\">\r\n        <img src={modalImg} alt={modalAlt} />\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  modalImg: PropTypes.string.isRequired,\r\n  modalAlt: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Button.css';\r\n\r\nconst Button = ({ onClick }) => {\r\n  return (\r\n    <div>\r\n      <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n        Load more\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","function fetchImages(url, keyword, page = 1, api_key, per_page = 12) {\r\n  return fetch(\r\n    `${url}?q=${keyword}&page=${page}&key=${api_key}&image_type=photo&orientation=horizontal&per_page=${per_page}`,\r\n  ).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(\r\n      new Error(`Нет картинки с кодовым словом ${keyword}`),\r\n    );\r\n  });\r\n}\r\n\r\nconst api = { fetchImages };\r\n\r\nexport default api;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Loader from '../Loader';\r\nimport ImageGalleryItem from './ImageGalleryItem';\r\nimport Modal from '../Modal';\r\nimport Button from '../Button';\r\nimport imagesAPI from '../../services/images-api';\r\nimport './ImageGallery.css';\r\n\r\nconst URL = 'https://pixabay.com/api/';\r\nconst API_KEY = '22634984-1ce924b253c51d48f10b47cfd';\r\nconst per_page = 12;\r\nconst Status = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\nlet modalImg;\r\nlet modalAlt;\r\n\r\nfunction ImageGallery({ imageKeyword, startPage }) {\r\n  const [images, setImages] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (!imageKeyword) {\r\n      return;\r\n    }\r\n    setStatus(Status.PENDING);\r\n\r\n    imagesAPI\r\n      .fetchImages(URL, imageKeyword, startPage, API_KEY, per_page)\r\n      .then(images => {\r\n        setImages(images.hits);\r\n        setPage(startPage + 1);\r\n        setStatus(Status.RESOLVED);\r\n        setLoading(true);\r\n      }, scrollWindow())\r\n      .catch(error => {\r\n        setError(error);\r\n        setStatus(Status.REJECTED);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, [imageKeyword, startPage]);\r\n\r\n  const buttonClick = () => {\r\n    imagesAPI\r\n      .fetchImages(URL, imageKeyword, page, API_KEY, per_page)\r\n      .then(image => {\r\n        setImages([...images, ...image.hits]);\r\n        setPage(page + 1);\r\n        setStatus(Status.RESOLVED);\r\n        setLoading(false);\r\n        scrollWindow();\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n        setStatus(Status.REJECTED);\r\n      })\r\n      .finally(setLoading(!loading));\r\n  };\r\n\r\n  function scrollWindow() {\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n  }\r\n\r\n  const toggleModal = (url, alt) => {\r\n    setShowModal(!showModal);\r\n    modalImg = url;\r\n    modalAlt = alt;\r\n  };\r\n\r\n  const renderButton = images.length > 0 && !loading;\r\n\r\n  if (status === Status.IDLE) {\r\n    return <div>Введите ключевое слово</div>;\r\n  }\r\n\r\n  if (status === Status.PENDING) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (status === Status.REJECTED) {\r\n    return <h1>{error}</h1>;\r\n  }\r\n\r\n  if (status === Status.RESOLVED) {\r\n    return (\r\n      <>\r\n        <ul className=\"ImageGallery\">\r\n          <ImageGalleryItem images={images} onClick={toggleModal} />\r\n        </ul>\r\n        {renderButton && <Button onClick={buttonClick} />}\r\n        {showModal && (\r\n          <Modal\r\n            onClose={toggleModal}\r\n            modalImg={modalImg}\r\n            modalAlt={modalAlt}\r\n          ></Modal>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  imageKeyword: PropTypes.string.isRequired,\r\n  startPage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import { useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\n\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const [imageKeyword, setImageKeyword] = useState('');\n  const [page] = useState(1);\n\n  return (\n    <div className=\"App\">\n      <Searchbar onSubmit={setImageKeyword} />\n      <ImageGallery imageKeyword={imageKeyword} startPage={page} />\n      <ToastContainer autoClose={3000} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}